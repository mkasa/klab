#!/usr/bin/env perl

use strict;

use Getopt::Long;
use Digest::SHA1;
use DBI;
use DBD::SQLite;
use File::Find;

my $debug = 0;
my $flag_add = 0;
my $flag_search = 0;
my $flag_remove = 0;
my $flag_skip_error = 0;
my $flag_summary = 0;
my $flag_show_only_new_files = 0;

GetOptions(
	'a|add'  => \$flag_add,
	's'      => \$flag_search,
    'remove' => \$flag_remove,
    'eskip'  => \$flag_skip_error,
	'h'      => \$flag_summary,
	'n'      => \$flag_show_only_new_files,
	'debug'  => \$debug
);

my $dbname = shift;
my $dirname = shift;

my $flag_show_usage = 0;
$flag_show_usage = 1 unless(defined $dirname);
$flag_show_usage = 1 unless(defined $dbname);
$flag_show_usage = 1 unless(defined $flag_add || defined $flag_search || defined $flag_remove);
$flag_show_usage = 1 unless(defined $dbname && defined $dirname);

if($flag_show_usage) {
	print STDERR "usage: sha_scan -a <DB name> <directory to scan>   (This is for the first scan phase)\n";
	print STDERR "       sha_scan -s <DB name> <directory to scan>   (This is to check files)\n";
	print STDERR "       sha_scan --remove <DB name> <directory to scan>   (This is to remove redundant files)\n";
	exit 1;
}

my $data_source = "dbi:SQLite:dbname=$dbname";

if($flag_add) {
	unless(-e $dbname) {
	    print STDERR "Creating db '$dbname'\n";
	    my $h = DBI->connect($data_source);
	    $h->do("create table files(name text primary key, hash text);");
	    $h->do("create index files_hash_index on files(hash);");
	    $h->disconnect();
	} else {
	    print STDERR "Using existing db '$dbname'\n";
	}
} else {
	unless(-e $dbname) {
		die "Cannot find '$dbname'";
	}
}

print STDERR "Connecting to db '$dbname'\n";
our $dbh = DBI->connect($data_source);
our $db_insert = $dbh->prepare("insert into files values(?, ?)");
our $db_select = $dbh->prepare("select * from files where hash=?");

sub add_wanted
{
	my $f = $_;
	my $fp = $File::Find::name;
	my $ctx = Digest::SHA1->new;
	unless(-d $f) {
	    unless(open FH, "<", $f) {
 	        print STDERR "Could not open '$f'";
	        die unless($flag_skip_error);
	        return;
        }
	    $ctx->addfile(*FH);
	    close FH;
	    my $dgst = $ctx->hexdigest();
	    print "$fp\t$dgst\n";
	    $db_insert->execute($fp, $dgst);
	}
}

our $count_of_found_files = 0;
our $count_of_notfound_files = 0;

sub scan_wanted
{
	my $f = $_;
	my $ctx = Digest::SHA1->new;
	unless(-d $f) {
	    unless(open FH, "<", $f) {
 	        print STDERR "Could not open '$f'";
	        die unless($flag_skip_error);
	        return;
        }
	    $ctx->addfile(*FH);
	    close FH;
	    my $dgst = $ctx->hexdigest();
	    if($db_select->execute($dgst)) {
	        my $ft = $db_select->fetch();
	        unless(defined $ft) {
                unless($flag_summary) {
                    if($flag_show_only_new_files) {
                        print "$f\n";
                    } else {
                        print "$f\tnot found\n";
                    }
                }
	            $count_of_notfound_files++;
	        } else {
                unless($flag_show_only_new_files) {
                    print "$f\tfound\t$ft->[0]\n" unless($flag_summary);
                }
	            $count_of_found_files++;
	        }
	    } else {
		    print "Skipped $f (DB error)\n";
	    }
	}
}

sub remove_wanted
{
    # NOTE: this sub is basically dup of scan_wanted so should be refactored later.
	my $f = $_;
	my $ctx = Digest::SHA1->new;
	unless(-d $f) {
	    unless(open FH, "<", $f) {
 	        print STDERR "Could not open '$f'";
	        die unless($flag_skip_error);
	        return;
        }
        $ctx->addfile(*FH);
        close FH;
        my $dgst = $ctx->hexdigest();
        if($db_select->execute($dgst)) {
            my $ft = $db_select->fetch();
            unless(defined $ft) {
                print "$f\tnot found\n" unless($flag_summary);
                $count_of_notfound_files++;
            } else {
                print "$f\tfound\t$ft->[0]\n" unless($flag_summary);
                unless(unlink $f) {
                    print "$f\tcould not be removed (error): $!\n" unless($flag_summary);
                }
                $count_of_found_files++;
            }
        } else {
            print "Skipped $f (DB error)\n";
        }
	}
}

unless(-x $dirname) {
	print STDERR "ERROR: '$dirname' does not exist\n";
	exit 1;
}

if($flag_add) {
	finddepth(\&add_wanted, $dirname);
} else {
    if($flag_remove) {
        finddepth(\&remove_wanted, $dirname);
    } else {
        finddepth(\&scan_wanted, $dirname);
    }
    if($flag_summary) {
        print "$count_of_found_files files found, $count_of_notfound_files not found.\n";
    }
}

=pod

=head1 NAME

sha_scan - Calculate SHA1 hashes of files, and find duplicated files.

=head1 SYNOPSYS

Scan (files in) a directory:

B<sha_scan> -a E<lt>DB fileE<gt> E<lt>input directoryE<gt>

Check (files in) a directory:

B<sha_scan> -s E<lt>DB fileE<gt> E<lt>input directoryE<gt>

Check files in a directory but shows only new files:

B<sha_scan> -n -s E<lt>DB fileE<gt> E<lt>input directoryE<gt>

Removed files in a directory when their hashes are in DB file:

B<sha_scan> --remove E<lt>DB fileE<gt> E<lt>input directoryE<gt>

=head1 DESCRIPTION

First, you scan through a directory to create database of SHA1 hashes of files in a directory.

B<sha_scan> -a E<lt>DB fileE<gt> E<lt>input directoryE<gt>

The database is in SQLite3 format so you can view it using any SQLite3 clients.
If the database file already exists, it simply adds new hashes into the database, so you can
put hashes from different directories together in a single database file.

Next, you want to see whether files in a specified directory match to the already-scanned files
in the database.

B<sha_scan> -s E<lt>DB fileE<gt> E<lt>checking directoryE<gt>

For each file, it outputs whether a file of the same contents exists.
If such a file exists, it also outputs the path of the file in the database.

If you wish to directly remove redacted files, please use

B<sha_scan> --remove E<lt>DB fileE<gt> E<lt>checking directoryE<gt>

This will scan through all files under the given directory, and remove files if their hashes
are in the database file.

=head1 OPTIONS

=over 8

=item B<-h>
This option is valid only if -s is given.
When you want to see if a specified directory contains any new files
(i.e., any files whose hash do not match with the files registered in the databases),
you just do not want to see a long list of results.
You just need whether all files in the directory are known or not.
When this option is given, sha_scan outputs only the number of known/unknown files.

=item B<--eskip>
When a file could not be opened, B<sha_scan> immediately quits, but it continues
when this option is given.

=item B<-n>
Show only new files. This option can be used only with -s.

=back

=cut
