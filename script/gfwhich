#!/usr/bin/env perl

use strict;
use Getopt::Long;
use Pod::Usage;
use Cwd 'getcwd';
use Term::ANSIColor;
# use Data::Dump qw(dump); # I used it only for debugging, so I commented out this here.

my $debug = 0;
my $param_left_column_size = 10;
my $param_num_replica = 2;
my $flag_man = 0;
my $flag_help = 0;
my $flag_sudo = 0;
my $flag_omit_consistent = 0;
my $flag_show_detail = 0;
my $flag_quick_fix = 0;
my $flag_fix = 0;
my $flag_dirfix = 0;
my $flag_clean = 0;
my $flag_df = 0;
my $flag_show_xattr = 0;
my $flag_whole = 0;
my $param_gfid = undef;
my $param_gfid_query = undef;
my $param_command = undef;
my $param_resolve_gfid = undef;
my $param_remove_xattrop = undef;

GetOptions(
    "debug"         => \$debug,
    "help"          => \$flag_help,
    "man"           => \$flag_man,
    "l=i"           => \$param_left_column_size,
    "i"             => \$flag_omit_consistent,
    "d"             => \$flag_show_detail,
    "fix"           => \$flag_fix,
    "quickfix"      => \$flag_quick_fix,
    "dirfix"        => \$flag_dirfix,
    "w"             => \$flag_whole,
    "clean"         => \$flag_clean,
    "df"            => \$flag_df,
    "lsattr"        => \$flag_show_xattr,
    "resolvegfid=s" => \$param_resolve_gfid,
    "removexattrop=s" => \$param_remove_xattrop,
    "r=i"           => \$param_num_replica,
    "gfid=s"        => \$param_gfid,
    "qgfid=s"       => \$param_gfid_query,
    "cmd=s"         => \$param_command,
    "sudo"          => \$flag_sudo
);

my $param_fix_file;
my $param_fix_host;

if($flag_fix) {
	$param_fix_file = shift;
    $param_fix_host = shift;
    $flag_help = 1 if(!defined $param_fix_file || !defined $param_fix_host);
}
if($flag_dirfix) {
    $param_fix_file = shift;
    $flag_help = 1 if(!defined $param_fix_file);
}

pod2usage(1) if $flag_help;
pod2usage(-verbose => 2) if $flag_man; 

sub read_config
{
    my $brick_info_file = $ENV{'HOME'} . "/.gfinfo";
    open my $fh, "<", $brick_info_file or die "Cannot open ~/.gfinfo. Read the manual (gfwhich -man).";
    my @retval;
    my $gpath = <$fh>; chomp $gpath;
    while(<$fh>) {
        chomp;
        next if(m|^\s*$|);
        unless(m|^(.*?):(.*)$|) {
            print "A line in ~/.gfinfo is not valid. It should look like 'host:path'.\n";
            print "Line: $_\n";
            exit 1;
        }
        push(@retval, {"host" => $1, "path" => $2});
    }
    close $fh;
    return {"gluster_path" => $gpath, "bricks" => \@retval};
}

sub print_and_do
{
    my $cmd = shift;
    print STDERR " "x$param_left_column_size;
    print STDERR color('yellow') . "\$ $cmd" . color('reset') . "\n";
    system $cmd;
    if($? == -1) {
        print STDERR "Failed to spawn.\n";
        exit 3;
    }
    if($?) {
        my $exit_status = $? >> 8;
        print STDERR "An error occurred (exited with $exit_status).\n";
        exit 2;
    }
}

sub get_scp_path_from_fname
{
    my ($cwd, $file, $host, @bricks) = @_;
    my $remote_path;
    for(@bricks) {
        if($_->{"host"} eq $host) {
            $remote_path = "$host:" . $_->{"path"} . "/" . $cwd . "/" . $file;
            last;
        }
    }
    return $remote_path;
}

sub fix_file
{
    my ($gpath, $cwd, $file, $host, @bricks) = @_;
    if(-d $file) {
        print STDERR "Cannot fix a directory. We can fix only files.\n";
        exit 1;
    }
    my $remote_path = get_scp_path_from_fname($cwd, $file, $host, @bricks);
    unless(defined $remote_path) {
        print STDERR "Could not find a remote host '$host' in the brick list.\n";
        exit 1;
    }
    my $local_path = "$file.tmp.$$";
    print_and_do("scp $remote_path $local_path");
    print_and_do("mv $file $file.orig");
    print_and_do("mv $local_path $file");
    if($flag_clean) {
        print_and_do("rm $file.orig");
    }
}

sub fix_dir
{
    my $dir_name = shift;
    my $tmp_dir_name = "$dir_name.tmp.$$";
    print_and_do("mkdir '$tmp_dir_name'");
    {
        my $cmd = "sh -c 'mv ";
        my $any_file_exists = 0;
        my @regular_files = <$dir_name/*>;
        if(0 < @regular_files) {
            $cmd .= "\"$dir_name\"/*";
            $any_file_exists = 1;
        }
        my @dot_files = <$dir_name/.*>;
        if(2 < @dot_files) { # we always see '.' and '..'
            $cmd .= " " if($any_file_exists);
            $cmd .= "\"$dir_name\".[0-9a-z]*"; # this is to avoid matching against '.' or '..'
            $any_file_exists = 1;
        }
        $cmd .= " \"$tmp_dir_name\"/'";
        if($any_file_exists) {
            print_and_do($cmd);
        }
    }
    print_and_do("rmdir '$dir_name'");
    print_and_do("mv '$tmp_dir_name' '$dir_name'");
}

sub shell_escape
{
    my $s = shift;
    $s =~ s|(['"\\])|\\$1|g;
    return $s;
}

sub execute_command
{
    my ($gpath, $cwd, $command, @bricks) = @_;
    for my $brick (@bricks) {
        my $host = $brick->{"host"};
        my $path = $brick->{"path"};
        my $cmd = "ssh ";
        $cmd .= "-t " if($flag_sudo);
        $cmd .= "$host ";
        $cmd .= "sudo " if($flag_sudo);
        {
            $command =~ s|:P|$path/$cwd|;
            my $pcmd = "sh -c \"cd $path/$cwd; " . shell_escape($command) . "\"";
            $cmd .= "\"" . shell_escape($pcmd) ."\"";
        }
        print "\$ $cmd\n" if($debug);
        print "On host $host:\n";
        system $cmd;
    }
}

sub print_disk_free_space
{
    my @bricks = @_;
    my $has_header_shown = 0;
    for my $brick (@bricks) {
        my $host = $brick->{"host"};
        my $path = $brick->{"path"};
        my $cmd = "ssh ";
        $cmd .= "-t " if($flag_sudo);
        $cmd .= "$host ";
        $cmd .= "sudo " if($flag_sudo);
        $cmd .= "env LANG=C df -h $path";
        print "\$ $cmd\n" if($debug);
        my @results = `$cmd`;
        for(@results) {
            if(/Mounted on/) {
                if($has_header_shown) { next; }
                $has_header_shown = 1;
                print "          $_";
            } else {
                printf "%9s:%s", $host, $_;
            }
        }
    }
}

sub print_gfid_dir
{
    my ($gfid, $suffix, @bricks) = @_;
    $gfid =~ s|^xattrop-||;
    $gfid =~ s|^0x||;
    $gfid =~ tr/A-Z/a-z/;
    unless($gfid =~ m|^([\da-f][\da-f])([\da-f][\da-f])|) {
        print STDERR "ERROR: '$gfid' does not look like a gfid.\n";
        exit 3;
    }
    my $p1 = $1; my $p2 = $2;
    if(length($gfid) < 36) {   # reformat gfid
        $gfid = substr($gfid,  0, 8) . "-" .
                substr($gfid,  8, 4) . "-" .
                substr($gfid, 12, 4) . "-" .
                substr($gfid, 16, 4) . "-" .
                substr($gfid, 20)
    }
    my $lpath = ".glusterfs/$p1/$p2/$gfid";
    for my $brick (@bricks) {
        my $host = $brick->{"host"};
        my $path = $brick->{"path"};
        my $cmd = "ssh ";
        $cmd .= "-t " if($flag_sudo);
        $cmd .= "$host ";
        $cmd .= "sudo " if($flag_sudo);
        $cmd .= "env LANG=C ls -iald $path/$lpath";
        $cmd .= "/$suffix" if(defined $suffix && $suffix ne '');
        print "\$ $cmd\n" if($debug);
        system $cmd;
    }
}

sub print_indices_xattr
{
    my @bricks = @_;
    for my $brick (@bricks) {
        my $host = $brick->{"host"};
        my $path = $brick->{"path"};
        my $cmd = "ssh ";
        $cmd .= "-t " if($flag_sudo);
        $cmd .= "$host ";
        $cmd .= "sudo " if($flag_sudo);
        $cmd .= "env LANG=C ls -al $path/.glusterfs/indices/xattrop";
        print "\$ $cmd\n" if($debug);
        system $cmd;
    }
}

sub print_gfid_of_file_or_dir
{
    my ($gluster_path, $cwd, $lpath, @bricks) = @_;
    unless($lpath =~ m|^/|) { # relative
        $lpath = "$cwd/$lpath";
    }
    unless($lpath =~ s|^$gluster_path/||) {
        print "The given directory '$lpath' does not seem like a GlusterFS directory.\n";
        exit 1;
    }
    for my $brick (@bricks) {
        my $host = $brick->{"host"};
        my $path = $brick->{"path"};
        my $cmd = "ssh ";
        $cmd .= "-t " if($flag_sudo);
        $cmd .= "$host ";
        $cmd .= "sudo " if($flag_sudo);
        $cmd .= "env LANG=C getfattr -m trusted.gfid -d -e hex $path/$lpath";
        $cmd .= " | grep trusted.gfid";
        print "\$ $cmd\n" if($debug);
        system $cmd;
    }
}

sub remove_xattrop
{
    my ($fname, $spec_host, @bricks) = @_;
    if($fname =~ /^\s*$/) {
        print STDERR "USAGE gfwhich -removexattrop host fname\n";
        exit 1;
    }
    for my $brick (@bricks) {
        my $host = $brick->{"host"};
        next if($spec_host ne $host);
        my $path = $brick->{"path"};
        my $cmd = "ssh ";
        $cmd .= "-t " if($flag_sudo);
        $cmd .= "$host ";
        $cmd .= "sudo " if($flag_sudo);
        $cmd .= "env LANG=C rm $path/.glusterfs/indices/xattrop/$fname";
        print "\$ $cmd\n" if($debug);
        system $cmd;
    }
}

sub resolve_gfid
{
    my ($attr_fname, $mount_point, @bricks) = @_;
    my @gfids = ();
    open my $fh, "<", $attr_fname or die "Could not open '$attr_fname'";
    while(<$fh>) {
        chomp;
        while(m|([\da-f]+)-([\da-f]+)-([\da-f]+)-([\da-f]+)-([\da-f]+)|ig) {
            push(@gfids, "$1-$2-$3-$4-$5");
            print STDERR "Found GFID '" . $gfids[-1] . "'\n" if($debug > 0);
        }
    }
    close $fh;
    my $host_2_inums = {};
    print STDERR "Gathering GFID info...\n";
    for my $gfid (@gfids) {
        unless($gfid =~ m|^([\da-f][\da-f])([\da-f][\da-f])|) {
            print STDERR "ERROR: '$gfid' does not look like a gfid.\n";
            next;
        }
        my $p1 = $1; my $p2 = $2;
        my $lpath = ".glusterfs/$p1/$p2/$gfid";
        for my $brick (@bricks) {
            my $host = $brick->{"host"};
            my $path = $brick->{"path"};
            my $cmd = "ssh ";
            $cmd .= "-t " if($flag_sudo);
            $cmd .= "$host ";
            $cmd .= "sudo " if($flag_sudo);
            $cmd .= "env LANG=C ls -iald $path/$lpath";
            print "\$ $cmd\n" if($debug);
            use File::Temp qw/tempfile/;
            my ($fh, $fname) = tempfile("gfwhichXXXXXX", DIR => "/tmp", UNLINK => 0);
            system "$cmd > $fname";
            for(`cat $fname`) {
                if(/^\s*(\d+)/) {
                    my $inode_number = $1;
                    push(@{$host_2_inums->{$host}}, $inode_number);
                    print STDERR "Found inum $inode_number at host $host\n" if($debug > 0);
                }
            }
            unlink $fname;
        }
    }
    my $number_of_inodes_found = 0;
    while(my ($k, $v) = each %$host_2_inums) {
        $number_of_inodes_found += length(@$v);
    }
    if($number_of_inodes_found <= 0) {
        print STDERR "No inode number found. Abort.\n";
        return;
    }
    print STDERR "$number_of_inodes_found inode numbers found.\n";
    print STDERR "Searching files with specified GFID. This may take a long time.\n";
    for my $brick (@bricks) {
        my $host = $brick->{"host"};
        my $path = $brick->{"path"};
        my $cmd = "ssh ";
        $cmd .= "-t " if($flag_sudo);
        $cmd .= "$host ";
        $cmd .= "sudo " if($flag_sudo);
        $cmd .= "env LANG=C find $path -name .glusterfs -prune";
        for my $inum (@{$host_2_inums->{$host}}) {
            $cmd .= " -o -inum $inum -print";
        }
        $path .= "/" unless($path =~ m|/$|);
        $mount_point .= "/" unless($mount_point =~ m|/$|);
        $cmd .= " | perl -ple 's|^$path|$mount_point|'";
        print "\$ $cmd\n" if($debug);
        system "$cmd";
    }
}

sub ensure_you_have_root
{
    if($ENV{'USER'} ne 'root' && !$flag_sudo) {
        print STDERR "ERROR: you need to be root, or add -sudo option.\n";
        exit 1;
    }
    0;
}

my $ini = read_config();
my $gluster_path = $ini->{"gluster_path"};
my @bricks = @{$ini->{"bricks"}};
if($flag_df) {
    print_disk_free_space(@bricks);
    exit 0;
}

if(defined $param_gfid) {
    ensure_you_have_root();
    print_gfid_dir($param_gfid, "", @bricks);
    exit 0;
}
my $cwd = getcwd();
if(defined $param_gfid_query) {
    ensure_you_have_root();
    print_gfid_of_file_or_dir($gluster_path, $cwd, $param_gfid_query, @bricks);
    exit 0;
}
if($flag_show_xattr) {
    ensure_you_have_root();
    print_indices_xattr(@bricks);
    exit 0;
}
if(defined $param_resolve_gfid) {
    ensure_you_have_root();
    resolve_gfid($param_resolve_gfid, $gluster_path, @bricks);
    exit 0;
}
if(defined $param_remove_xattrop) {
    ensure_you_have_root();
    my $fname = shift;
    remove_xattrop($fname, $param_remove_xattrop, @bricks);
    exit 0;
}

unless($cwd =~ m|^$gluster_path/(.*)$|) {
    print "The current directory '$cwd' does not seem like a GlusterFS directory.\n";
    print "Check the first line of ~/.gfinfo\n";
    print "It should contain the mount point of GlusterFS.\n";
    exit 1;
}
$cwd = $1;

if($flag_fix) {
    fix_file($gluster_path, $cwd, $param_fix_file, $param_fix_host, @bricks);
    exit 0;
}
if($flag_dirfix) {
    fix_dir($param_fix_file);
    exit 0;
}
if(defined $param_command) {
    execute_command($gluster_path, $cwd, $param_command, @bricks);
    exit 0;
}

if($debug) {
    print "Bricks:\n  " . join("\n  ", @bricks) . "\n";
}

my %file_name_2_infos = ();

for my $brick (@bricks) {
    my $host = $brick->{"host"};
    my $path = $brick->{"path"};
    my $cmd = "ssh $host env LANG=C ls -al $path/$cwd";
    print "\$ $cmd\n" if($debug);
    my @results = `$cmd`;
    if(0 < @results) {
        shift @results;
        shift @results;
        shift @results;
        for(@results) {
            # -rw-r--r-- 2 mkasa users 1329004544 Mar 18 16:11 CEPdaoD.sspace.scafSeq.fill.fa.sp2
            if(m|([ldrwxst-]{10}?)\s+\d+\s+[\w\d]+\s+[\w\d]+\s+(\d+)\s+\w+\s+\d+\s+\d+:?\d+\s+(.*)$|i) {
                my $perm = $1;
                my $fsize = $2;
                my $fname = $3;
                print "$host: $fname = $fsize\n" if($debug);
                my $line = $_; chomp $line;
                if($perm =~ m|^l|) {
                    unless($fname =~ m|^(.*) -> (.*)$|) {
                        print STDERR "ERROR: Symbolic link could not be parsed.\n";
                        print STDERR "STR: '$fname'.\n";
                    } else {
                        my $to_path = $1;
                        my $from_path = $2;
                        print "link from '$from_path' to '$to_path'\n" if($debug);
                        push(@{$file_name_2_infos{$to_path}}, {"host" => $host, "size" => $fsize, "perm" => $perm, "linestr" => $line, "linkfrom" => $from_path});
                    }
                } else {
                    push(@{$file_name_2_infos{$fname}}, {"host" => $host, "size" => $fsize, "perm" => $perm, "linestr" => $line});
                }
            } else {
                print STDERR "WARNING: SSH to $host yielded a unparsable result\n";
                print STDERR "   LINE: $_\n";
            }
        }
    } else {
        print STDERR "WARNING: SSH to $host did not yield a result\n";
    }
}

my @ls_results = `env LANG=C ls -al`;
my $line_num = 0;
for my $line (@ls_results) {
    chomp $line;
    $line_num++;
    if($line_num <= 3) {
        print " "x$param_left_column_size;
        print "$line\n";
        next;
    }
    unless($line =~ m|([ldrwxst-]{10}?)\s+\d+\s+[\w\d]+\s+[\w\d]+\s+(\d+)\s+\w+\s+\d+\s+\d+:?\d+\s+(.*)$|i) {
        print STDERR "WARNING: local ls yielded a unparsable result\n";
        print STDERR "   LINE: $line\n";
        next;
    }
    my $perm = $1;
    my $fsize = $2;
    my $fname = $3;
    my $origin_name_if_symbolic_link;
    my $is_symbolic_link = $perm =~ m|^l|;
    if($is_symbolic_link) {
        unless($fname =~ m|^(.*) -> (.*)$|) {
            print STDERR "ERROR: Symbolic link could not be parsed.\n";
            print STDERR "STR: '$fname'.\n";
            next;
        }
        $fname = $1;
        $origin_name_if_symbolic_link = $2;
    }
    my $remaining_columns = $param_left_column_size;
    my $has_found_inconsistency = 0;
    my %valid_directory_sizes = ();
    my $is_directory = $perm =~ m|^d|;
    if($is_directory) {
        my %t;
        for my $o (@{$file_name_2_infos{$fname}}) {
            $t{$o->{"size"}}++;
        }
        while(my ($k, $v) = each %t) {
            if($v % $param_num_replica != 0) { $has_found_inconsistency = 1; }
        }
    } else {
        for my $o (@{$file_name_2_infos{$fname}}) {
            if($o->{"perm"} eq '---------T') {
                $has_found_inconsistency = 1 if($o->{"size"} != 0);
            } else {
                $has_found_inconsistency = 1 if($fsize != $o->{"size"});
            }
        }
    }
    next if($flag_omit_consistent && !$has_found_inconsistency);
    for my $o (@{$file_name_2_infos{$fname}}) {
        my $host = $o->{"host"};
        if($is_directory) {
            if($has_found_inconsistency) {
                if(exists $valid_directory_sizes{$o->{"size"}}) {
                    print color('red'), $host, color('reset'), " ";
                } else {
                    print color('green'), $host, color('reset'), " ";
                }
            } else {
                if($o->{"size"} < 10) {
                    print color('blue'), $host, color('reset'), " ";
                } else {
                    print "$host ";
                }
            }
        } else {
            if($fsize != $o->{"size"}) {
                if($fsize > $o->{"size"}) {
                    if($has_found_inconsistency) {
                        print color('red'), $host, color('reset'), " ";
                    } else {
                        print color('blue'), $host, color('reset'), " ";
                    }
                } else {
                    print color('green'), $host, color('reset'), " ";
                }
            } else {
                if($o->{"size"} > 0 && $o->{"perm"} eq '---------T') {
                    print color('red'), $host, color('reset'), " ";
                } else {
                    print "$host ";
                }
            }
        }
        $remaining_columns -= 1 + length($host);
    }
    $remaining_columns = 1 if($remaining_columns < 1);
    print " "x$remaining_columns, "$line\n";
    if(($flag_show_detail || $flag_whole) && $has_found_inconsistency) {
        if($flag_show_detail) {
            print " "x$param_left_column_size;
            my $largest_file_size = 0;
            for my $o (@{$file_name_2_infos{$fname}}) {
                $largest_file_size = $o->{"size"} if($o->{"size"} > $largest_file_size);
            }
            for my $o (@{$file_name_2_infos{$fname}}) {
                my $host = $o->{"host"};
                print "$host: ";
                if($largest_file_size > $o->{"size"}) {
                    print color('red'), "$o->{size}", color('reset'), " ";
                } else {
                    print color('green'), "$o->{size}", color('reset'), " ";
                }
            }
            print "\n";
        }
        if($flag_whole) {
            for my $o (@{$file_name_2_infos{$fname}}) {
                print " "x$param_left_column_size;
                print color('yellow'), $o->{"host"}, ": ", $o->{"linestr"}, color('reset'), "\n";
            }
        }
    }
    # print dump($file_name_2_infos{$fname}) . "\n";
    if($has_found_inconsistency && $flag_quick_fix) {
        if($is_directory) {
            print STDERR " "x$param_left_column_size;
            print STDERR color('red') . "WARNING: '$fname' is a directory, so will not fix it (not supported). Check it manually." . color('reset') . "\n";
        } elsif($is_symbolic_link) {
            print STDERR " "x$param_left_column_size;
            print STDERR color('red') . "WARNING: '$fname' is a symbolic link, so will not fix it (not supported). Check it manually." . color('reset') . "\n";
        } else {
            my @sane_files;
            for my $o (@{$file_name_2_infos{$fname}}) {
                if($o->{"perm"} ne '---------T' && $o->{"size"} == $fsize) { push(@sane_files, $o); }
            }
            if($param_num_replica <= @sane_files) {
                for(@sane_files) {
                    print " "x$param_left_column_size;
                    print "$_->{host} looks sane.\n";
                    $_->{"local_path"} = "$fname.tmp.$_->{host}.$$";
                    my $remote_path = get_scp_path_from_fname($cwd, $fname, $_->{host}, @bricks);
                    if(defined $remote_path) {
                        print_and_do("scp $remote_path $_->{local_path}");
                    } else {
                        print STDERR color('red') . "ERROR: Could not find the remote path for '$fname'" . color('reset') ."\n";
                    }
                }
                my $files_were_different = 0;
                for(my $i = 1; $i < @sane_files; $i++) {
                    my $cmd = "cmp -s $sane_files[0]->{local_path} $sane_files[$i]->{local_path}";
                    print STDERR " "x$param_left_column_size;
                    if($? == -1) {
                        print STDERR "ERROR: Could not spawn 'cmp -s' for '$fname'" . color('reset') . "\n";
                    } else {
                        my $retcode = $? >> 8;
                        if($retcode != 0) {
                            print STDERR "$sane_files[0]->{host} and $sane_files[$i]->{host} are different.\n";
                            $files_were_different = 1;
                        }
                    }
                }
                if($files_were_different) {
                    print STDERR " "x$param_left_column_size;
                    print STDERR color('red') . "ERROR: The retrieved replica were different! You have to fix it for yourself.\n";
                } else {
                    print "All replica were identical, so we will fix it.\n";
                    print_and_do("mv $fname $fname.orig");
                    print_and_do("cp $sane_files[0]->{local_path} $fname");
                    for(@sane_files) {
                        print_and_do("rm $_->{local_path}");
                    }
                    if($flag_clean) {
                        print_and_do("rm $fname.orig");
                    }
                }
            } else {
                print STDERR color('yellow') . "INFO: The sufficient number of replica was not found for '$fname'" . color('reset') . ", so skipped.\n";
            }
        }
    }
}

=head1 NAME

gfwhich - Checking the hostnames in which files in the current directory are stored. (GlusterFS only)

=head1 SYNOPSIS

gfwhich [options]

gfwhich --fix <filename> <host>

gfwhich --dirfix <dirname>

gfwhich --quickfix

=head1 OPTIONS

=over 8

=item B<-r>
Set the number of replica. The default is 2.
If you keep three copies of every file (in GlusterFS), then give B<-r=3>.

=item B<-i>
Show only inconsistent files.

=item B<-d>
Show details (hostnames and sizes) when inconsistencies are found.

=item B<-w>
Show very details (the results of ls -al) when inconsistencies are found.

=item B<--sudo>
Add 'sudo' to commands (if possible). This may help you manipulate files
that are acceccible by root but not by your account.

=item B<-l=d>
When the host names you use are too long to fit in the default column size,
you can use -l option to change the length of the columns for hostnames.
For example, the longest hostnames you have is 12 bytes, and the number of
replicas in GlusterFS is 3, then you need (12 + 1) x 3 = 39 columns to
fit them in, so you will give -l=39.

=item B<-debug>
This is for debugging.

=item B<--fix>
You give B<--fix> option when you wish to fix an inconsistent file.
This option also requires a file name and a host name.
B<gfwhich> copies the file on the specified host, thus fixing the split-brain
problem. This copying occurs as "copy to a temporary file" and subsequent
"rename to the original file", so that you can consider the copying as
nearly atomic.

=item B<--quickfix>
When you give B<--quickfix> option, and we find an inconsistent file,
we try to fix it. First, it sees if the sufficient number of valid replica
are available. If not, that file is skipped. When the sufficient number of
replica were found, all of them are copied into temporary files, which are
then compared each other. If the copied replica are all the same, it is
copied back to GlusterFS. The original file is renamed with ".orig" suffix.

=item B<--dirfix>
B<--dirfix> fixes a split-brain status of the given directory.
First, it creates a temporary directory. Then, it moves all the files
in the given directory into the temporary directory. If successful,
it removes the (empty) given directory, rename the temporary directory
to the original given directory. After the whole process, the metadata
of the given directory becomes consistent across replicas.

=item B<-clean>
B<-clean> can be used with B<--fix> or B<--quickfix>. B<--fix> and B<--quickfix> fix
an inconsistent file(s) and it still preserves the original file by renaming
into a file with ".orig" suffix (e.g, "foo.txt" ==> "foo.txt.orig").
If you trust the script and you wish not to leave the original files,
then please give B<-clean>. The original (split-brain and possibly
corrupted) file will be removed, and never gets back. You should be
careful when you use this option. You can just type "rm *.orig" to
do the same thing even after running it with B<--fix> and without B<-clean>.

=item B<-gfid>
B<-gfid> shows the underlying files (or directories) behind the specified file or directory.
If the specified is a file, you will see replicated files in physical bricks.
If the specified is a directory, you will see the directory replicated in all of the physical bricks.
You can check the GFID of the parent directory of the specified file/directory by this option.

This option requires a root priviledge--you need a root account or at least that you can do sudo.

=item B<-qgfid>
B<-qgfid> queries the GFID of a given file. For example, 'gfwhich -sudo -qgfid abc' will show the GFID of a file (or directory) abc.

This option requires a root priviledge--you need a root account or at least that you can do sudo.

=item B<-lsattr>
B<-lsattr> shows the GFIDs of pending operations (such as self-heal) 

This option requires a root priviledge--you need a root account or at least that you can do sudo.

=item B<-resolvegfid>
B<-resolvegfid> resolves GFIDs in the specified input file into gluster paths.
Here is an example::

    host1% echo f5a34588-1ea3-4c9d-8252-ac0241921627 > /tmp/foo
    host1% gfwhich -resolvegfid /tmp/foo

The input file is matched against the GUID regular expression, and the matched strings are
used as input GFIDs. In other words, you do not have to remove non-GUID (non-GFID) strings
before you give it to gfwhich. Therefore you can easily feed the output of other tools into gfwhich B<-resolvegfid>.
The following example shows the paths (for user) for files being self-healed.

    host1% gfwhich -lsattr > somefile
    host1% gfwhich -resolvegfid somefile

Initially, gfwhich -resolvegfid inputs file names from the stdin. However, using a non-tty stdin led to
rejection in sudo command, which was unacceptable for resolving GFIDs requiring a root priviledge.

=item B<-removexattrop>
B<-removexattrop> removes a specified xattrop file. An example is here::

    host2% gfwhich -removexattrop host1 xattrop-2b1232dc-79f9-4880-a55e-98488b0fa7f3
    host2% gfwhich -removexattrop host2 f723067f-fcce-4b94-8db2-598d763592ab

=item B<-cmd>
B<-cmd> executes a specified command on all of the bricks on the remote hosts.
For example, the following command will show you the path of the remote directories::

    $ cwd
    /gluster/foo/bar/baz
    $ gfwhich -cmd pwd
    On host host00:
    /export/g/foo/bar/baz
    On host host01:
    /export/g/foo/bar/baz
    On host host02:
    /export/g/foo/bar/baz
    On host host03:
    /export/g/foo/bar/baz

You may need to escape spaces and parentheses if any::

    $ gfwhich -cmd 'ls -al'

If the command includes ':P' (without parens), it is expanded into the corresponding physical path (on a brick) of the current directory.

=back

=head1 DESCRIPTION
GlusterFS can be configured to mirror files into different hosts.
Mirroring improves the availability of data, but we see sometimes a so-called "split-brain" situation,
in which mirrored files contain different contents. B<gfwhich> might help you dignose what happened
and what to do in such a situation.

First, B<gfwhich> searches files in the current directory, and shows which hosts the files are
actually stored in. When you give -d options, it shows the file sizes for "split-brain" files,
which will help you diganose which one is the correct one (or sadly both corrupted).

=head1 HOW TO SET UP
B<gfwhich> requires a config file to detect GlusterFS configuration.
Since the configuration files are not always readable by user, B<gfwhich> requires
users to describe the configuration of GlusterFS in ~/.gfinfo

The first line of ~/.gfinfo contains the path to the GlusterFS mount point.
The following lines are pairs of host and the path of the brick(s) on it.
The example will look like this::

    /gluster
    host00:/export/gluster
    host01:/export/gluster
    host02:/export/gluster
    host03:/export/gluster
    host04:/export/gluster
    host05:/export/gluster

You also need to have a priviledge to directly SSH into those hosts on which
the bricks are available. This does not always hold, but users (without admin
priviledge) cannot diagnose a split-brain problem in this case by design (of
GlusterFS); so B<gfwhich> does not consider this case.

=cut
