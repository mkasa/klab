#!/usr/bin/env python
"""
csv2md: a standalone utility to convert CSV into a table in Markdown-extra format

usage: cat example.csv | csv2md [options...] [column names and attributes]

options:
	-v	show the version and exit
    -n  no header (i.e, the first line of CSV is not a header)

This utility converts an input file of CSV format into a table in Markdown-extra format.
Here is an example.

(echo 'a,b,Salary,Performance'; echo 'John,Doe,12345,32.123456') | csv2html "First name/l" "Last name/l" /,r "/%.2"
|First name|Last name|Salary|Performance|
|:--|:--|--:|--:|
|John|Doe|12,345|32.12%|

A column attribute contains both the column name and its attribute, which are separated by '/'.
If you do not need one of them, you can just omit it.
The left side of '/' is the column name, while the right side is the attribute.
If the attribute string contains '%', '%' is added to the column.
If the attribute string contains ',', then figures are separated by ',' at every 3 digits.
You can also specify 'printf-like' formatting string for floating numbers.
'.3' means three digits after the decimal point, while '05' means padding zeroes to 5 digits.

"""

version_string = "1.00"

import os,sys,csv,argparse

class MarkdownWriter:

    def decorate(self, s, attrs):
        # print "s = ", s, ", attrs = ", attrs
        retval = ''
        if attrs['fmtr']:
            format_str = attrs['fmtr']
            if format_str.find(".") == -1:
                format_str += ".0"
            s = ("%" + format_str + "f") % float(s)
        if attrs['sepc']:
            if s.find(".") == -1:
                l = len(s)
                rest = ''
            else:
                l = s.find(".")
                rest = s[l:]
            p = ''
            offset = (3 - (l % 3)) % 3
            i = 0
            while i < l:
                if i != 0 and (i + offset) % 3 == 0:
                    p += ','
                p += s[i]
                i += 1
            retval += p + rest
        else:
            retval += s
        if attrs['ratio']:
            retval += '%'
        return retval

    def writeheadrow(self, cols, attrs, col_names):
        for i, a, name in zip(cols, attrs, col_names):
            s = str(i) if name == None else name
            sys.stdout.write("|" + s)
        sys.stdout.write("|\n")
        for a in attrs:
            if a['align'] == None:
                s = "---"
            elif a['align'] == "left":
                s = ":--"
            elif a['align'] == "right":
                s = "--:"
            elif a['align'] == "center":
                s = ":-:"
            else:
                s = "---"
            sys.stdout.write("|" + s)
        sys.stdout.write("|\n")

    def writerow(self, cols, attrs):
        for i, a in zip(cols, attrs):
            sys.stdout.write("|" + self.decorate(str(i), a))
        sys.stdout.write("|\n")

def w(a):
    sys.stdout.write(a)

def parse_attributes(cfs, col_num):
    """ parses attribute strings, and returns a triplet of the column names, the header attributes and the data attributes """
    cnames = []
    hattr = []
    dattr = []
    def parse_attr_str(s):
        d = {'align': None, 'sepc': False, 'ratio': False, 'fmtr': ""}
        if len(s) < 1: return d
        i = 0
        while i < len(s):
            c = s[i]
            if "0123456789.-".find(c) != -1:
                while i < len(s) and "0123456789.-".find(s[i]) != -1:
                    d['fmtr'] += s[i]
                    i += 1
                i -= 1
            elif c == ',':
                d['sepc'] = True
            elif c == 'l':
                d['align'] = "left"
            elif c == 'r':
                d['align'] = "right"
            elif c == 'c':
                d['align'] = "center"
            elif c == '%':
                d['ratio'] = True
            i += 1
        return d
    null_attributes = parse_attr_str("")
    for v in cfs:
        ri = v.rfind("/")
        if ri == -1:
            if v == ".":
                cnames.append(None)
            else:
                cnames.append(v)
            hattr.append(null_attributes)
            dattr.append(null_attributes)
        else:
            if 0 <= ri - 1:
                col_name = v[0: ri - 1]
            else:
                col_name = None
            if col_name == "":
                cnames.append(None)
            else:
                cnames.append(col_name)
            attr_str = v[ri + 1:]
            pi = attr_str.rfind("|")
            if pi == -1:
                hattr.append(null_attributes)
                dattr.append(parse_attr_str(attr_str))
            else:
                if 0 <= pi - 1:
                    dattr.append(parse_attr_str(attr_str[0: pi - 1]))
                else:
                    dattr.append(null_attributes)
                hattr.append(parse_attr_str(attr_str[pi + 1:]))
    while len(cnames) < col_num:
        cnames.append(None)
        hattr.append(null_attributes)
        dattr.append(null_attributes)
    return cnames, hattr, dattr

def main():
    # Parse arguments
    parser = argparse.ArgumentParser(description='Convert JSON (one JSON object, one line) into CSV')
    parser.add_argument('colfmt', nargs='*', action='store', help="Column formats")
    parser.add_argument('-n', '--noheader', action='store_true', help="Suppress a header")
    parser.add_argument('-v', '--version',  action='store_true', help="Show version string")
    args = parser.parse_args()

    if args.version:
        print("csv2md version %s" % version_string)
        sys.exit(0)
    (column_names, header_attrs, data_attrs) = (None, None, None)
    # Get keys in the first line (using jq)
    writer = MarkdownWriter()
    line_count = 0
    try:
        line_count += 1
        reader = csv.reader(sys.stdin)
        is_first_line = True
        for line in reader:
            if is_first_line:
                is_first_line = False
                try:
                    (column_names, header_attrs, data_attrs) = parse_attributes(args.colfmt, len(line))
                except Exception as e:
                    print("ERROR: attribute parsing failed: ", e, file=sys.argvstderr)
                    sys.exit(2)
                if not args.noheader:
                    writer.writeheadrow(line, data_attrs, column_names)
                    continue
            writer.writerow(line, data_attrs)
    except Exception as e:
        print("ERROR: ", e, " at line %d" % line_count, file=sys.stderr)
        sys.exit(3)

if __name__ == '__main__':
    main()

