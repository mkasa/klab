#!/usr/bin/env python

import click
import os
import sys
import re
import hashlib
import sqlite3


exclude_files_regex = (r'^\._',
                       r'^\.dropbox\.device$',
                       r'^\.fseventsd$',
                       r'^fseventsd-uuid$',
                       r'^WPSettings\.dat$',
                       r'^desktop\.ini$',
                       r'^\.git$',
                       r'^\.waf3-',
                      )


def is_name_excluded(name):
    """ Check if the file name is excluded from the scan """
    global exclude_files_regex
    for regex in exclude_files_regex:
        if re.match(regex, name):
            return True
    return False


def get_file_digest(file_name, eskip):
    digest = hashlib.sha256()
    try:
        with open(file_name, 'rb') as f:
            DIGEST_BLOCK_SIZE = 1024 * 1024
            for chunk in iter(lambda: f.read(DIGEST_BLOCK_SIZE), b""):
                digest.update(chunk)
    except IOError as e:
        print("Error: Unable to open file '{}'".format(file_name), file=sys.stderr)
        if eskip:
            return None
        print("Exiting due to the error. {}".format(e), file=sys.stderr)
        sys.exit(1)
    return digest.hexdigest()


def generate_full_and_relative_path(dir_path, root, fname):
    full_path = os.path.join(root, fname)
    rel_path = full_path.replace(dir_path, '')
    if rel_path[0] == '/':
        rel_path = rel_path[1:]
    return full_path, rel_path


def add_files(db_file, dir_path, followsymlink, eskip, show_summary, debug):
    """ Add files to the database """
    if not os.path.exists(db_file):
        print("Creating a new database '{}'".format(db_file), file=sys.stderr)
        connection = sqlite3.connect(db_file)
        cursor = connection.cursor()
        cursor.execute('''CREATE TABLE files (name text primary key, hash text)''')
        cursor.execute('''CREATE INDEX files_hash_index on files(hash)''')
    else:
        print("Using existing database '{}'".format(db_file), file=sys.stderr)
        connection = sqlite3.connect(db_file)
        cursor = connection.cursor()
    uncommited_file_count = 0
    num_files = 0
    for root, directories, files in os.walk(dir_path, followlinks=followsymlink):
        if debug:
            print("Scanning '{}'".format(root), file=sys.stderr)
        for ix, dirname in reversed(list(enumerate(directories))):
            if is_name_excluded(dirname):
                del directories[ix]
        for fname in files:
            if is_name_excluded(fname):
                continue
            full_path, rel_path = generate_full_and_relative_path(dir_path, root, fname)
            hex_digest = get_file_digest(full_path, eskip)
            print("Adding '{}': {}".format(rel_path, hex_digest), file=sys.stderr)
            num_files += 1
            cursor.execute('''INSERT OR REPLACE INTO files VALUES (?, ?)''', (rel_path, hex_digest))
            uncommited_file_count += 1
            if 80 <= uncommited_file_count:
                connection.commit()
                uncommited_file_count = 0
    connection.commit()
    connection.close()
    if show_summary:
        print("Added {} files".format(num_files), file=sys.stderr)


def search_files(do_remove, db_file, dir_path, eskip, followsymlink, show_only_new, show_summary, debug):
    """ Search for files in the database """
    connection = sqlite3.connect(db_file)
    cursor = connection.cursor()
    num_scanned_files = 0
    num_excluded_files = 0
    num_excluded_dirs = 0
    num_scanned_dirs = 1
    num_duplicated_files = 0
    for root, directories, files in os.walk(dir_path, followlinks=followsymlink):
        if debug:
            print("Scanning '{}'".format(root), file=sys.stderr)
        for ix, dirname in reversed(list(enumerate(directories))):
            if is_name_excluded(dirname):
                del directories[ix]
                num_excluded_dirs += 1
            else:
                num_scanned_dirs += 1
        for fname in files:
            if is_name_excluded(fname):
                num_excluded_files += 1
                continue
            num_scanned_files += 1
            full_path, rel_path = generate_full_and_relative_path(dir_path, root, fname)
            hex_digest = get_file_digest(full_path, eskip)
            if debug:
                print("Scanning '{}': {}".format(rel_path, hex_digest), file=sys.stderr)
            result = cursor.execute('''SELECT COUNT(*) FROM files WHERE hash = ?''', (hex_digest,))
            one_line = result.fetchone()
            num_entries_in_db = one_line[0]
            if debug:
                print("  Result = {}".format(num_entries_in_db), file=sys.stderr)
            if num_entries_in_db == 0:
                print("Not found '{}'".format(rel_path))
            else:
                num_duplicated_files += 1
                if not show_only_new:
                    print("Found '{}' ({})".format(rel_path, num_entries_in_db))
                if do_remove:
                    try:
                        os.remove(full_path)
                    except IOError as e:
                        print("Error: Unable to remove file '{}'".format(full_path), file=sys.stderr)
                        if eskip:
                            continue
                        print("Exiting due to the error. {}".format(e), file=sys.stderr)
                        sys.exit(1)
    connection.close()
    if show_summary:
        print("Scanned {} files in {} directories".format(num_scanned_files, num_scanned_dirs), file=sys.stderr)
        print("Excluded {} files, {} dirs".format(num_excluded_files, num_excluded_dirs), file=sys.stderr)
        print("Found {} duplicated files".format(num_duplicated_files), file=sys.stderr)


def remove_files(db_file, dir_path, followsymlink, debug):
    """ Remove files when they are in the database """


@click.command()
@click.option('--add', is_flag=True, help='Add the file to the database')
@click.option('--search', is_flag=True, help='Search for the file in the database')
@click.option('--remove', is_flag=True, help='Remove the file when it is duplicated (found in the database)')
@click.option('--eskip', is_flag=True, help='Skip the error when the file cannot be opend in the database')
@click.option('--summary', is_flag=True, help='Show the summary of the scan')
@click.option('--new', is_flag=True, help='Show only the new files')
@click.option('--exclude', multiple=True, help='Exclude the file from the scan')
@click.option('--followsymlink', is_flag=True, help='Follow the symlink')
@click.option('--debug', is_flag=True, help='Show the debug information')
@click.argument('db_file_path')
@click.argument('dir_path')
def main(add, search, remove, eskip, summary, new, exclude, debug, db_file_path, followsymlink, dir_path):
    """ Scan the directory and add the files to the database """
    global exclude_files_regex
    exclude_files_regex += exclude_files_regex + exclude
    if debug:
        print('exclude_files_regex: {}'.format(exclude_files_regex))

    # Check if the input arguments are sane
    if not (add or search or remove):
        print('Please specify the action from --add, --search, --remove')
        sys.exit(1)
    if (add and search) or (add and remove) or (search and remove):
        print('Please specify only one action from --add, --search, --remove')
        sys.exit(1)
    if (eskip and not search):
        print('Please specify the --search when using --eskip. --eskip is meaningful only when scanning.')
        sys.exit(1)
    if not add and not os.path.exists(db_file_path):
        print('Database file does not exist: %s' % db_file_path)
        sys.exit(1)
    if not os.path.exists(dir_path):
        print('Directory does not exist: %s' % dir_path)
        sys.exit(1)
    if not os.path.isdir(dir_path):
        print('Not a directory: %s' % dir_path)
        sys.exit(1)
    if not os.access(dir_path, os.R_OK):
        print('Directory is not readable: %s' % dir_path)
        sys.exit(1)

    if add:
        add_files(db_file_path, dir_path, followsymlink, eskip, summary, debug)
        sys.exit(0)
    if search:
        search_files(False, db_file_path, dir_path, followsymlink, eskip, new, summary, debug)
        sys.exit(0)
    if remove:
        search_files(True, db_file_path, dir_path, followsymlink, eskip, new, summary, debug)
        sys.exit(0)


if __name__ == '__main__':
    main()


"""
=pod

=head1 NAME

sha_scan - Calculate SHA1 hashes of files, and find duplicated files.

=head1 QUICKSTART

sha_scan --add <DB name> <directory to scan>      (This is for the first scan phase)
sha_scan --scan <DB name> <directory to scan>     (This is to check files)
sha_scan --remove <DB name> <directory to scan>   (This is to remove redundant files)

=head1 SYNOPSYS

Scan (files in) a directory:

B<sha_scan> --add E<lt>DB fileE<gt> E<lt>input directoryE<gt>

Check (files in) a directory:

B<sha_scan> --scan E<lt>DB fileE<gt> E<lt>input directoryE<gt>

Check files in a directory but shows only new files:

B<sha_scan> --new --scan E<lt>DB fileE<gt> E<lt>input directoryE<gt>

Removed files in a directory when their hashes are in DB file:

B<sha_scan> --remove E<lt>DB fileE<gt> E<lt>input directoryE<gt>

=head1 DESCRIPTION

First, you scan through a directory to create database of SHA1 hashes of files in a directory.

B<sha_scan> --add E<lt>DB fileE<gt> E<lt>input directoryE<gt>

The database is in SQLite3 format so you can view it using any SQLite3 clients.
If the database file already exists, it simply adds new hashes into the database, so you can
put hashes from different directories together in a single database file.

Next, you want to see whether files in a specified directory match to the already-scanned files
in the database.

B<sha_scan> --scan E<lt>DB fileE<gt> E<lt>checking directoryE<gt>

For each file, it outputs whether a file of the same contents exists.
If such a file exists, it also outputs the path of the file in the database.

If you wish to directly remove redacted files, please use

B<sha_scan> --remove E<lt>DB fileE<gt> E<lt>checking directoryE<gt>

This will scan through all files under the given directory, and remove files if their hashes
are in the database file.

=head1 OPTIONS

=over 8

=item B<-h>
This option is valid only if -s is given.
When you want to see if a specified directory contains any new files
(i.e., any files whose hash do not match with the files registered in the databases),
you just do not want to see a long list of results.
You just need whether all files in the directory are known or not.
When this option is given, sha_scan outputs only the number of known/unknown files.

=item B<--eskip>
When a file could not be opened, B<sha_scan> immediately quits, but it continues
when this option is given.

=item B<--exclude>
Exclude files whose file name matches to a specified regex pattern.

=item B<--followsymlink>
Follow symbolic links when scanning directories.

=item B<--new>
Show only new files. This option can be used only with -s.

=item B<--summary>
Show the summary of the scan result.

=back

=cut
"""
