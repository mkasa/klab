#!/usr/bin/env perl

use strict;
use Getopt::Long;
use Pod::Usage;
use Term::ANSIColor;
use File::Temp qw/tempfile/;

my $flag_leavefile          = 0;
my $flag_showscript         = 0;
my $flag_download           = 0;
my $flag_yank               = 0;
my $flag_interactive_first  = 0;
my $flag_interactive_second = 0;
my $param_csv               = undef;
my $flag_csv_stdin          = 0;
my $param_tsv               = undef;
my $param_image_file        = undef;
my $flag_tsv_stdin          = 0;

my $flag_help = 0;
my $flag_man  = 0;
my $debug     = 0;

GetOptions(
    'help|?'        => \$flag_help,
    'man'           => \$flag_man,
    'leave'         => \$flag_leavefile,
    'showscript'    => \$flag_showscript,
    'csv|c=s'       => \$param_csv,
    'tsv|t=s'       => \$param_tsv,
    'C'             => \$flag_csv_stdin,
    'T'             => \$flag_tsv_stdin,
    'interactive|i' => \$flag_interactive_first,
    "edit|e"        => \$flag_interactive_second,
    'download|d'    => \$flag_download,
    'output|o=s'    => \$param_image_file,
    'yank|y'        => \$flag_yank,
    'debug'         => \$debug,
) or pod2usage(2);
pod2usage(1) if $flag_help;
pod2usage(-verbose => 2) if $flag_man;
pod2usage(2) if(@ARGV < 1 && !$flag_interactive_first && !$flag_interactive_second);
if((defined $param_csv || $flag_csv_stdin) && (defined $param_tsv || $flag_tsv_stdin)) {
    print STDERR "ERROR: You cannot specify both --csv/-C and --tsv/-T\n";
    exit 2;
}
if($debug && !$flag_leavefile) {
    print STDERR "WARNING: add --leave if you want to examine temporary files.\n";
}

my $rcmd = join("\n", @ARGV) . "\n";

sub ensure_iterm2_is_there()
{
    system "~/.iterm2/it2check";
    if($? < 0) {
        print STDERR "ERROR: could not execute it2check, which is needed for downloading. Note that this feature is strictly for iTerm2 on macOS.\n";
        exit 2;
    }
    if(0 < ($? >> 8)) {
        print STDERR "ERROR: your terminal is not iTerm2. Abordted.\n";
        exit 2;
    }
}

my $tmp = File::Temp->new( UNLINK => 0, SUFFIX => '.r' );
if($flag_download && !$param_image_file) {
    my $num = 1;
    while(1) {
        my $fname = sprintf("figure%d.png", $num);
        unless(-e $fname) {
            $param_image_file = $fname;
            last;
        }
        $num++;
    }
}
if($param_image_file) {
    print $tmp "file_name <- \"$param_image_file\";"
} else {
    print $tmp <<'EOS'
# generate a temporary file name
file_name <- tempfile(pattern = "file", tmpdir = tempdir(), fileext = "")
EOS
;
}

print $tmp <<'EOS'
# set the output to the temporary png file
png(file_name)
# load tidyverse and ggplot2 but suppress the loading messages
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(ggplot2))
EOS
;

if($param_csv | $param_tsv | $flag_csv_stdin | $flag_tsv_stdin) {
    my $function_name = "read_csv";
    my $filename = "\"$param_csv\"";
    my $extra_opts = '';
    if($param_tsv || $flag_tsv_stdin) {
        $function_name = "read_tsv";
        $filename = "\"$param_tsv\"";
    }
    $filename = 'file("stdin")' if($flag_csv_stdin || $flag_tsv_stdin);
    print $tmp "a <- $function_name($filename$extra_opts);\n";
}
if($flag_interactive_first || $flag_interactive_second) {
    my ($sec, $min, $hour, $mday, $mon, $year, $wday) = localtime();
    my $temp_file_name = ($ENV{'TMP'} || $ENV{'TMPDIR'} || "/tmp") . "/" . sprintf("%02d-%02d-%02d.r", $year + 1900, $mon, $mday);
    my $cmdline = $ENV{'EDITOR'};
    unless(defined $cmdline && $cmdline ne '') {
        $cmdline = 'vi';
    }
    $cmdline .= " " . $temp_file_name;
    if($flag_interactive_first && !defined $rcmd && $rcmd ne '') {
        unless($flag_interactive_second) {
            # if the file already exists, rename it to a backup file name
            if(-e $temp_file_name) {
                my $backup_generation = 1;
                while(1) {
                    my $fname = $temp_file_name . "." . $backup_generation;
                    unless(-e $fname) {
                        rename($temp_file_name, $fname);
                        last;
                    }
                    $backup_generation++;
                }
            }
            # creates a new template
            open my $fh, ">", $temp_file_name or die "ERROR: Cannot open $temp_file_name";
            print $fh, "# a <- read_csv(\"input.csv\")\n";
            print $fh join("\n", @ARGV);
            print $fh "\n";
            print $fh "# assign the ggplot to g\n";
            print $fh "# g <- ggplot()\n";
            close $fh;
        }
    }
    system $cmdline;
    if($?) {
        print STDERR "ERROR: an editor quits with an error.\n";
        unless($flag_leavefile) {
            print "rm $tmp\n" if($debug);
            unlink $tmp unless($flag_leavefile);
        }
        exit 2;
    }
    open my $fh, "<", $temp_file_name or die "ERROR: Cannot open $temp_file_name";
    my @input_program_lines = <$fh>;
    $rcmd = join("\n", @input_program_lines) . "\n";
    close $fh;
}
print $tmp "$rcmd\n";
if($rcmd =~ /ggplot/) {
    print $tmp "plot(g)\n";
}
print $tmp <<'EOS'
# suppress messages
dont_use_value <- dev.off()
# show the png image if generated
EOS
;
unless($flag_yank) {
    print $tmp <<'EOS'
if(file.exists(file_name)) {
    # suppress messages
    dont_use_value <- system2("imgcat2", file_name)
}
EOS
;
}
unless($param_image_file) {
    print $tmp "unlink($param_image_file);\n" if($debug);
    unlink($param_image_file);
}
close $tmp;

if($flag_showscript) {
    system "cat $tmp\n";
    exit 0;
}
unless(defined $ENV{'OPENBLAS_NUM_THREADS'}) {
    $ENV{'OPENBLAS_NUM_THREADS'} = 4;
}
if($flag_yank) {
    ensure_iterm2_is_there();
    my $stdout_tmp = File::Temp->new( UNLINK => 0, SUFFIX => '.txt' );
    print "Rscript $tmp 2>&1 | tee $stdout_tmp\n" if($debug);
    system "Rscript $tmp 2>&1 | tee $stdout_tmp\n";
    my $cmd = "~/.iterm2/it2copy $stdout_tmp";
    print STDERR "CMDLINE: $cmd\n" if($debug);
    system $cmd;
    unlink $stdout_tmp unless($flag_leavefile);
} else {
    print "Rscript $tmp\n" if($debug);
    system "Rscript $tmp\n";
}

if($flag_download) {
    ensure_iterm2_is_there();
    my $cmd = "~/.iterm2/it2dl $param_image_file";
    print STDERR "CMDLINE: $cmd\n" if($debug);
    system $cmd;
}
unless($flag_leavefile) {
    print "rm $tmp\n" if($debug);
    unlink $tmp unless($flag_leavefile);
}


=pod

=head1 NAME

ggplot - display a graphical plot on terminal using iTerm2

=head1 SYNOPSIS

ggplot [options...] [--csv <CSV file> | --tsv <TSV file>] <R command to plot>

Options:
   --csv|-c           read CSV file
   -C                 read CSV fron stdin
   --tsv|-t           read TSV file
   -T                 read TSV from stdin
   --help             brief help message
   --man              full documentation
   --leave            leave temporary files
   --debug            enable debugging output

=head1 OPTIONS

=over 8

=item B<--csv|-c>

Read from a specified CSV file. The file is read by B<read_csv> and stored in valuable B<a>.

=item B<-C>

Read from stdin (in CSV).

=item B<--tsv|-t>

Read from a specified TSV file. The file is read by B<read_tsv> and stored in valuable B<a>.
When the filename is B<->, B<plotr> reads from stdin.

=item B<-T>

Read from stdin (in TSV).

=item B<--leave>

Leave temporary files. This option may help you debug the plot.

=item B<--showscript>

Show the R script used for generating the plot, and exit.

=item B<--download|-d>

Download the generated image file using iTerm2. When you use B<--download> on a remote server,
you will download the file on your local computer. This function is implemented using the function
of iTerm2, so cannot use other terminals.

=item B<--yank|-y>

Copy the generated output (text) to your local clipboard. When you use B<--yank> on a remote server,
the result will be copied to your local clipboard. This function is implemented using the function of iTerm2,
so cannot use other terminals.

=item B<-help>

Print a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<plotr> creates a graphical plot using R, and put the image on your terminal.
B<plotr> uses B<imgcat> and the function of iTerm2, so you need to install B<imgcat> and iTerm2 in advance.
iTerm2 is available at https://iterm2.com/ (macOS only). B<imgcat> can be installed by typing B<pip install imgcat>.

Another prerequisite is B<R>. In the B<R> environment, B<plotr> uess B<tidyverse> and B<plotr>, so they both must be installed in advance.

The command line arguments are basically a series of R commands.

=head1 EXAMPLE
Read from a CSV file with a single column, and plot the histogram of it using the base R.

    plotr 'a <- scan("input.csv")' 'hist(a)'

Read from 'test.csv' with a column named "value", and plot the histogram of "value".

    plotr -c test.csv 'g <- ggplot(a, aes(x = value)) + geom_histogram()'

Open an editor (specified by B<EDITOR> environment variable), create a plot from it.

    plotr -i

=head1 TROUBLESHOOTING

=item B<Is R installed?>

You need to make sure R is installed and is on PATH.

=item B<Is tidyverse installed?>

You need to install tidyverse even if you do not use it on plotr.

=item B<Is ggplot2 installed?>

You need to install ggplot2 even if you do not use it on plotr.


=cut

