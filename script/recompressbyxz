#!/usr/bin/env python

import os, sys

def file_name_looks_like_hard_to_compress_file(file_name):
    for ext in ["png", "jpg", "jpeg", "bam", "avi", "mp4", "mkv", "webm", "7z", "cab", "rar", "bcf", "bw", "bigwig", "bb", "bigbed", "srf"]:
        if file_name.endswith("." + ext): return True
    return False

def recompress(file_name, base_name, uncompress_command):
    if file_name == '' or file_name == None:
        print "ERROR (file name is empty). Skipped.\n"
        return 1
    if base_name == '' or base_name == None:
        print "ERROR (base file name is empty). Skipped.\n";
        return 1
    if uncompress_command == '' or uncompress_command == None:
        print "ERROR (uncompress command is empty). Skipped.\n";
        return 1
    if file_name == (base_name + ".xz"):
        print "ERROR (file name is wrong). Skipped.\n"
        return 1
    print "compressing...\r",
    # print >> sys.stderr, "%s %s | xz > %s.xz" % (uncompress_command, file_name, base_name)
    r = os.system("%s %s | xz > %s.xz" % (uncompress_command, file_name, base_name))
    if r != 0:
        print file_name, "was not compressed   "
        return r
    print file_name, "compressed. Veryfying...\r",
    # print >> sys.stderr, "xzcat %s.xz > %s.xz.uncompressed" % (base_name, base_name)
    r2 = os.system("xzcat %s.xz > %s.xz.uncompressed" % (base_name, base_name))
    if r2 != 0:
        print file_name, "was compressed, but not verified (1)."
        os.unlink("%s.xz.uncompressed" % base_name)
        return r2
    # print >> sys.stderr, "%s %s > %s.uncompressed" % (uncompress_command, file_name, file_name)
    r3 = os.system("%s %s > %s.uncompressed" % (uncompress_command, file_name, file_name))
    if r3 != 0:
        print file_name, "was compressed, but not verified (2)."
        os.unlink("%s.xz.uncompressed" % base_name)
        os.unlink("%s.uncompressed" % file_name)
        return r2
    # print >> sys.stderr, "cmp %s.xz.uncompressed %s.uncompressed" % (base_name, file_name)
    r4 = os.system("cmp %s.xz.uncompressed %s.uncompressed" % (base_name, file_name))
    if r4 == 0:
        print file_name, "was compressed, and verified."
        os.unlink(file_name)
    os.unlink("%s.xz.uncompressed" % base_name)
    os.unlink("%s.uncompressed" % file_name)
    return 0


def recompress_by_xz(file_names):
    for file_name in file_names:
        if file_name == None or file_name == '':
            continue
        print file_name,
        if not os.path.exists(file_name):
            print "does not exist. Skipped."
            continue
        if not os.path.isfile(file_name):
            print "is not a file. Skipped."
            continue
        if file_name.endswith(".xz"):
            print "is already an xzed file. Skipped."
            continue
        if file_name_looks_like_hard_to_compress_file(file_name):
            print "is probably incompressible. Skipped."
            continue
        if file_name.endswith(".gz"):
            recompress(file_name, file_name[:-3], "zcat")
        elif file_name.endswith(".bz2"):
            recompress(file_name, file_name[:-4], "bzcat")
        elif os.path.getsize(file_name) < 4096:
            print "is too small to gain space."
        else:
            print "compressing...\r",
            r = os.system("xz %s" % file_name)
            if r == 0:
                print file_name, "compressed           "
            else:
                print file_name, "was not compressed   "

def ensure_tools_are_available():
    for tool in ["xz", "xzcat", "bunzip2", "zcat"]:
        if os.system("%s --help 2&>1 > /dev/null" % tool) != 0:
            print >> sys.stderr, "ERROR %s is not available." % tool
            sys.exit(2)

def main():
    if len(sys.argv) < 2:
        print >>sys.stderr, "Usage: recompressbyxz <input file>"
    ensure_tools_are_available()
    recompress_by_xz(sys.argv[1:])

if __name__ == "__main__":
    main()


